// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pb.proto
#ifndef GRPC_pb_2eproto__INCLUDED
#define GRPC_pb_2eproto__INCLUDED

#include "pb.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace pb {

class Pb final {
 public:
  static constexpr char const* service_full_name() {
    return "pb.Pb";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 订阅
    std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::MessageCb>> subscribeMsg(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::MessageCb>>(subscribeMsgRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::MessageCb>> AsyncsubscribeMsg(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::MessageCb>>(AsyncsubscribeMsgRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::MessageCb>> PrepareAsyncsubscribeMsg(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::MessageCb>>(PrepareAsyncsubscribeMsgRaw(context, request, cq));
    }
    // 取消订阅
    virtual ::grpc::Status unSubscribeMsg(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::pb::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::CommonResponse>> AsyncunSubscribeMsg(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::CommonResponse>>(AsyncunSubscribeMsgRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::CommonResponse>> PrepareAsyncunSubscribeMsg(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::CommonResponse>>(PrepareAsyncunSubscribeMsgRaw(context, request, cq));
    }
    // 发布 1对多,不需要回复
    // rpc publishMsgjhy(MessageCb)returns(CommonResponse){};
    virtual ::grpc::Status publishMsg(::grpc::ClientContext* context, const ::pb::MessageCb& request, ::pb::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::CommonResponse>> AsyncpublishMsg(::grpc::ClientContext* context, const ::pb::MessageCb& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::CommonResponse>>(AsyncpublishMsgRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::CommonResponse>> PrepareAsyncpublishMsg(::grpc::ClientContext* context, const ::pb::MessageCb& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::CommonResponse>>(PrepareAsyncpublishMsgRaw(context, request, cq));
    }
    // 回复函数
    std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::StreamMessage>> registerResponseCb(::grpc::ClientContext* context, const ::pb::RegisterMsg& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::StreamMessage>>(registerResponseCbRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::StreamMessage>> AsyncregisterResponseCb(::grpc::ClientContext* context, const ::pb::RegisterMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::StreamMessage>>(AsyncregisterResponseCbRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::StreamMessage>> PrepareAsyncregisterResponseCb(::grpc::ClientContext* context, const ::pb::RegisterMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::StreamMessage>>(PrepareAsyncregisterResponseCbRaw(context, request, cq));
    }
    // 消息请求函数 1对1 需要回复 
    std::unique_ptr< ::grpc::ClientWriterInterface< ::pb::StreamMessage>> registerRequestUpload(::grpc::ClientContext* context, ::pb::CommonResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::pb::StreamMessage>>(registerRequestUploadRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::pb::StreamMessage>> AsyncregisterRequestUpload(::grpc::ClientContext* context, ::pb::CommonResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::pb::StreamMessage>>(AsyncregisterRequestUploadRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::pb::StreamMessage>> PrepareAsyncregisterRequestUpload(::grpc::ClientContext* context, ::pb::CommonResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::pb::StreamMessage>>(PrepareAsyncregisterRequestUploadRaw(context, response, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 订阅
      virtual void subscribeMsg(::grpc::ClientContext* context, ::pb::SubscibeTopic* request, ::grpc::experimental::ClientReadReactor< ::pb::MessageCb>* reactor) = 0;
      // 取消订阅
      virtual void unSubscribeMsg(::grpc::ClientContext* context, const ::pb::SubscibeTopic* request, ::pb::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void unSubscribeMsg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void unSubscribeMsg(::grpc::ClientContext* context, const ::pb::SubscibeTopic* request, ::pb::CommonResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void unSubscribeMsg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::CommonResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 发布 1对多,不需要回复
      // rpc publishMsgjhy(MessageCb)returns(CommonResponse){};
      virtual void publishMsg(::grpc::ClientContext* context, const ::pb::MessageCb* request, ::pb::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void publishMsg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void publishMsg(::grpc::ClientContext* context, const ::pb::MessageCb* request, ::pb::CommonResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void publishMsg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::CommonResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 回复函数
      virtual void registerResponseCb(::grpc::ClientContext* context, ::pb::RegisterMsg* request, ::grpc::experimental::ClientReadReactor< ::pb::StreamMessage>* reactor) = 0;
      // 消息请求函数 1对1 需要回复 
      virtual void registerRequestUpload(::grpc::ClientContext* context, ::pb::CommonResponse* response, ::grpc::experimental::ClientWriteReactor< ::pb::StreamMessage>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::pb::MessageCb>* subscribeMsgRaw(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::MessageCb>* AsyncsubscribeMsgRaw(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::MessageCb>* PrepareAsyncsubscribeMsgRaw(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::CommonResponse>* AsyncunSubscribeMsgRaw(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::CommonResponse>* PrepareAsyncunSubscribeMsgRaw(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::CommonResponse>* AsyncpublishMsgRaw(::grpc::ClientContext* context, const ::pb::MessageCb& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::CommonResponse>* PrepareAsyncpublishMsgRaw(::grpc::ClientContext* context, const ::pb::MessageCb& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::pb::StreamMessage>* registerResponseCbRaw(::grpc::ClientContext* context, const ::pb::RegisterMsg& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::StreamMessage>* AsyncregisterResponseCbRaw(::grpc::ClientContext* context, const ::pb::RegisterMsg& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::StreamMessage>* PrepareAsyncregisterResponseCbRaw(::grpc::ClientContext* context, const ::pb::RegisterMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::pb::StreamMessage>* registerRequestUploadRaw(::grpc::ClientContext* context, ::pb::CommonResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::pb::StreamMessage>* AsyncregisterRequestUploadRaw(::grpc::ClientContext* context, ::pb::CommonResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::pb::StreamMessage>* PrepareAsyncregisterRequestUploadRaw(::grpc::ClientContext* context, ::pb::CommonResponse* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::pb::MessageCb>> subscribeMsg(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::pb::MessageCb>>(subscribeMsgRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::MessageCb>> AsyncsubscribeMsg(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::MessageCb>>(AsyncsubscribeMsgRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::MessageCb>> PrepareAsyncsubscribeMsg(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::MessageCb>>(PrepareAsyncsubscribeMsgRaw(context, request, cq));
    }
    ::grpc::Status unSubscribeMsg(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::pb::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::CommonResponse>> AsyncunSubscribeMsg(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::CommonResponse>>(AsyncunSubscribeMsgRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::CommonResponse>> PrepareAsyncunSubscribeMsg(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::CommonResponse>>(PrepareAsyncunSubscribeMsgRaw(context, request, cq));
    }
    ::grpc::Status publishMsg(::grpc::ClientContext* context, const ::pb::MessageCb& request, ::pb::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::CommonResponse>> AsyncpublishMsg(::grpc::ClientContext* context, const ::pb::MessageCb& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::CommonResponse>>(AsyncpublishMsgRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::CommonResponse>> PrepareAsyncpublishMsg(::grpc::ClientContext* context, const ::pb::MessageCb& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::CommonResponse>>(PrepareAsyncpublishMsgRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::pb::StreamMessage>> registerResponseCb(::grpc::ClientContext* context, const ::pb::RegisterMsg& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::pb::StreamMessage>>(registerResponseCbRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::StreamMessage>> AsyncregisterResponseCb(::grpc::ClientContext* context, const ::pb::RegisterMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::StreamMessage>>(AsyncregisterResponseCbRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::StreamMessage>> PrepareAsyncregisterResponseCb(::grpc::ClientContext* context, const ::pb::RegisterMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::StreamMessage>>(PrepareAsyncregisterResponseCbRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::pb::StreamMessage>> registerRequestUpload(::grpc::ClientContext* context, ::pb::CommonResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::pb::StreamMessage>>(registerRequestUploadRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::pb::StreamMessage>> AsyncregisterRequestUpload(::grpc::ClientContext* context, ::pb::CommonResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::pb::StreamMessage>>(AsyncregisterRequestUploadRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::pb::StreamMessage>> PrepareAsyncregisterRequestUpload(::grpc::ClientContext* context, ::pb::CommonResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::pb::StreamMessage>>(PrepareAsyncregisterRequestUploadRaw(context, response, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void subscribeMsg(::grpc::ClientContext* context, ::pb::SubscibeTopic* request, ::grpc::experimental::ClientReadReactor< ::pb::MessageCb>* reactor) override;
      void unSubscribeMsg(::grpc::ClientContext* context, const ::pb::SubscibeTopic* request, ::pb::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void unSubscribeMsg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void unSubscribeMsg(::grpc::ClientContext* context, const ::pb::SubscibeTopic* request, ::pb::CommonResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void unSubscribeMsg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::CommonResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void publishMsg(::grpc::ClientContext* context, const ::pb::MessageCb* request, ::pb::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void publishMsg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void publishMsg(::grpc::ClientContext* context, const ::pb::MessageCb* request, ::pb::CommonResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void publishMsg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::CommonResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void registerResponseCb(::grpc::ClientContext* context, ::pb::RegisterMsg* request, ::grpc::experimental::ClientReadReactor< ::pb::StreamMessage>* reactor) override;
      void registerRequestUpload(::grpc::ClientContext* context, ::pb::CommonResponse* response, ::grpc::experimental::ClientWriteReactor< ::pb::StreamMessage>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::pb::MessageCb>* subscribeMsgRaw(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request) override;
    ::grpc::ClientAsyncReader< ::pb::MessageCb>* AsyncsubscribeMsgRaw(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::pb::MessageCb>* PrepareAsyncsubscribeMsgRaw(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::CommonResponse>* AsyncunSubscribeMsgRaw(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::CommonResponse>* PrepareAsyncunSubscribeMsgRaw(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::CommonResponse>* AsyncpublishMsgRaw(::grpc::ClientContext* context, const ::pb::MessageCb& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::CommonResponse>* PrepareAsyncpublishMsgRaw(::grpc::ClientContext* context, const ::pb::MessageCb& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::pb::StreamMessage>* registerResponseCbRaw(::grpc::ClientContext* context, const ::pb::RegisterMsg& request) override;
    ::grpc::ClientAsyncReader< ::pb::StreamMessage>* AsyncregisterResponseCbRaw(::grpc::ClientContext* context, const ::pb::RegisterMsg& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::pb::StreamMessage>* PrepareAsyncregisterResponseCbRaw(::grpc::ClientContext* context, const ::pb::RegisterMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::pb::StreamMessage>* registerRequestUploadRaw(::grpc::ClientContext* context, ::pb::CommonResponse* response) override;
    ::grpc::ClientAsyncWriter< ::pb::StreamMessage>* AsyncregisterRequestUploadRaw(::grpc::ClientContext* context, ::pb::CommonResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::pb::StreamMessage>* PrepareAsyncregisterRequestUploadRaw(::grpc::ClientContext* context, ::pb::CommonResponse* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_subscribeMsg_;
    const ::grpc::internal::RpcMethod rpcmethod_unSubscribeMsg_;
    const ::grpc::internal::RpcMethod rpcmethod_publishMsg_;
    const ::grpc::internal::RpcMethod rpcmethod_registerResponseCb_;
    const ::grpc::internal::RpcMethod rpcmethod_registerRequestUpload_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 订阅
    virtual ::grpc::Status subscribeMsg(::grpc::ServerContext* context, const ::pb::SubscibeTopic* request, ::grpc::ServerWriter< ::pb::MessageCb>* writer);
    // 取消订阅
    virtual ::grpc::Status unSubscribeMsg(::grpc::ServerContext* context, const ::pb::SubscibeTopic* request, ::pb::CommonResponse* response);
    // 发布 1对多,不需要回复
    // rpc publishMsgjhy(MessageCb)returns(CommonResponse){};
    virtual ::grpc::Status publishMsg(::grpc::ServerContext* context, const ::pb::MessageCb* request, ::pb::CommonResponse* response);
    // 回复函数
    virtual ::grpc::Status registerResponseCb(::grpc::ServerContext* context, const ::pb::RegisterMsg* request, ::grpc::ServerWriter< ::pb::StreamMessage>* writer);
    // 消息请求函数 1对1 需要回复 
    virtual ::grpc::Status registerRequestUpload(::grpc::ServerContext* context, ::grpc::ServerReader< ::pb::StreamMessage>* reader, ::pb::CommonResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_subscribeMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_subscribeMsg() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_subscribeMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status subscribeMsg(::grpc::ServerContext* context, const ::pb::SubscibeTopic* request, ::grpc::ServerWriter< ::pb::MessageCb>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsubscribeMsg(::grpc::ServerContext* context, ::pb::SubscibeTopic* request, ::grpc::ServerAsyncWriter< ::pb::MessageCb>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_unSubscribeMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_unSubscribeMsg() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_unSubscribeMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unSubscribeMsg(::grpc::ServerContext* context, const ::pb::SubscibeTopic* request, ::pb::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestunSubscribeMsg(::grpc::ServerContext* context, ::pb::SubscibeTopic* request, ::grpc::ServerAsyncResponseWriter< ::pb::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_publishMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_publishMsg() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_publishMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status publishMsg(::grpc::ServerContext* context, const ::pb::MessageCb* request, ::pb::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpublishMsg(::grpc::ServerContext* context, ::pb::MessageCb* request, ::grpc::ServerAsyncResponseWriter< ::pb::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_registerResponseCb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_registerResponseCb() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_registerResponseCb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerResponseCb(::grpc::ServerContext* context, const ::pb::RegisterMsg* request, ::grpc::ServerWriter< ::pb::StreamMessage>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterResponseCb(::grpc::ServerContext* context, ::pb::RegisterMsg* request, ::grpc::ServerAsyncWriter< ::pb::StreamMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_registerRequestUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_registerRequestUpload() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_registerRequestUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerRequestUpload(::grpc::ServerContext* context, ::grpc::ServerReader< ::pb::StreamMessage>* reader, ::pb::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterRequestUpload(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::pb::CommonResponse, ::pb::StreamMessage>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(4, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_subscribeMsg<WithAsyncMethod_unSubscribeMsg<WithAsyncMethod_publishMsg<WithAsyncMethod_registerResponseCb<WithAsyncMethod_registerRequestUpload<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_subscribeMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_subscribeMsg() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::pb::SubscibeTopic, ::pb::MessageCb>(
          [this] { return this->subscribeMsg(); }));
    }
    ~ExperimentalWithCallbackMethod_subscribeMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status subscribeMsg(::grpc::ServerContext* context, const ::pb::SubscibeTopic* request, ::grpc::ServerWriter< ::pb::MessageCb>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::pb::SubscibeTopic, ::pb::MessageCb>* subscribeMsg() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::pb::SubscibeTopic, ::pb::MessageCb>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_unSubscribeMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_unSubscribeMsg() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::pb::SubscibeTopic, ::pb::CommonResponse>(
          [this](::grpc::ServerContext* context,
                 const ::pb::SubscibeTopic* request,
                 ::pb::CommonResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->unSubscribeMsg(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_unSubscribeMsg(
        ::grpc::experimental::MessageAllocator< ::pb::SubscibeTopic, ::pb::CommonResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::pb::SubscibeTopic, ::pb::CommonResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_unSubscribeMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unSubscribeMsg(::grpc::ServerContext* context, const ::pb::SubscibeTopic* request, ::pb::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void unSubscribeMsg(::grpc::ServerContext* context, const ::pb::SubscibeTopic* request, ::pb::CommonResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_publishMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_publishMsg() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::pb::MessageCb, ::pb::CommonResponse>(
          [this](::grpc::ServerContext* context,
                 const ::pb::MessageCb* request,
                 ::pb::CommonResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->publishMsg(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_publishMsg(
        ::grpc::experimental::MessageAllocator< ::pb::MessageCb, ::pb::CommonResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::pb::MessageCb, ::pb::CommonResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_publishMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status publishMsg(::grpc::ServerContext* context, const ::pb::MessageCb* request, ::pb::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void publishMsg(::grpc::ServerContext* context, const ::pb::MessageCb* request, ::pb::CommonResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_registerResponseCb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_registerResponseCb() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::pb::RegisterMsg, ::pb::StreamMessage>(
          [this] { return this->registerResponseCb(); }));
    }
    ~ExperimentalWithCallbackMethod_registerResponseCb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerResponseCb(::grpc::ServerContext* context, const ::pb::RegisterMsg* request, ::grpc::ServerWriter< ::pb::StreamMessage>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::pb::RegisterMsg, ::pb::StreamMessage>* registerResponseCb() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::pb::RegisterMsg, ::pb::StreamMessage>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_registerRequestUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_registerRequestUpload() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::pb::StreamMessage, ::pb::CommonResponse>(
          [this] { return this->registerRequestUpload(); }));
    }
    ~ExperimentalWithCallbackMethod_registerRequestUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerRequestUpload(::grpc::ServerContext* context, ::grpc::ServerReader< ::pb::StreamMessage>* reader, ::pb::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::pb::StreamMessage, ::pb::CommonResponse>* registerRequestUpload() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::pb::StreamMessage, ::pb::CommonResponse>;}
  };
  typedef ExperimentalWithCallbackMethod_subscribeMsg<ExperimentalWithCallbackMethod_unSubscribeMsg<ExperimentalWithCallbackMethod_publishMsg<ExperimentalWithCallbackMethod_registerResponseCb<ExperimentalWithCallbackMethod_registerRequestUpload<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_subscribeMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_subscribeMsg() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_subscribeMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status subscribeMsg(::grpc::ServerContext* context, const ::pb::SubscibeTopic* request, ::grpc::ServerWriter< ::pb::MessageCb>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_unSubscribeMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_unSubscribeMsg() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_unSubscribeMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unSubscribeMsg(::grpc::ServerContext* context, const ::pb::SubscibeTopic* request, ::pb::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_publishMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_publishMsg() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_publishMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status publishMsg(::grpc::ServerContext* context, const ::pb::MessageCb* request, ::pb::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_registerResponseCb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_registerResponseCb() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_registerResponseCb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerResponseCb(::grpc::ServerContext* context, const ::pb::RegisterMsg* request, ::grpc::ServerWriter< ::pb::StreamMessage>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_registerRequestUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_registerRequestUpload() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_registerRequestUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerRequestUpload(::grpc::ServerContext* context, ::grpc::ServerReader< ::pb::StreamMessage>* reader, ::pb::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_subscribeMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_subscribeMsg() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_subscribeMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status subscribeMsg(::grpc::ServerContext* context, const ::pb::SubscibeTopic* request, ::grpc::ServerWriter< ::pb::MessageCb>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsubscribeMsg(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_unSubscribeMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_unSubscribeMsg() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_unSubscribeMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unSubscribeMsg(::grpc::ServerContext* context, const ::pb::SubscibeTopic* request, ::pb::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestunSubscribeMsg(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_publishMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_publishMsg() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_publishMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status publishMsg(::grpc::ServerContext* context, const ::pb::MessageCb* request, ::pb::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpublishMsg(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_registerResponseCb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_registerResponseCb() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_registerResponseCb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerResponseCb(::grpc::ServerContext* context, const ::pb::RegisterMsg* request, ::grpc::ServerWriter< ::pb::StreamMessage>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterResponseCb(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_registerRequestUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_registerRequestUpload() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_registerRequestUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerRequestUpload(::grpc::ServerContext* context, ::grpc::ServerReader< ::pb::StreamMessage>* reader, ::pb::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterRequestUpload(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(4, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_subscribeMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_subscribeMsg() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->subscribeMsg(); }));
    }
    ~ExperimentalWithRawCallbackMethod_subscribeMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status subscribeMsg(::grpc::ServerContext* context, const ::pb::SubscibeTopic* request, ::grpc::ServerWriter< ::pb::MessageCb>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* subscribeMsg() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_unSubscribeMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_unSubscribeMsg() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->unSubscribeMsg(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_unSubscribeMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unSubscribeMsg(::grpc::ServerContext* context, const ::pb::SubscibeTopic* request, ::pb::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void unSubscribeMsg(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_publishMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_publishMsg() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->publishMsg(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_publishMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status publishMsg(::grpc::ServerContext* context, const ::pb::MessageCb* request, ::pb::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void publishMsg(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_registerResponseCb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_registerResponseCb() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->registerResponseCb(); }));
    }
    ~ExperimentalWithRawCallbackMethod_registerResponseCb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerResponseCb(::grpc::ServerContext* context, const ::pb::RegisterMsg* request, ::grpc::ServerWriter< ::pb::StreamMessage>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* registerResponseCb() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_registerRequestUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_registerRequestUpload() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->registerRequestUpload(); }));
    }
    ~ExperimentalWithRawCallbackMethod_registerRequestUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerRequestUpload(::grpc::ServerContext* context, ::grpc::ServerReader< ::pb::StreamMessage>* reader, ::pb::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* registerRequestUpload() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_unSubscribeMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_unSubscribeMsg() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::SubscibeTopic, ::pb::CommonResponse>(std::bind(&WithStreamedUnaryMethod_unSubscribeMsg<BaseClass>::StreamedunSubscribeMsg, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_unSubscribeMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status unSubscribeMsg(::grpc::ServerContext* context, const ::pb::SubscibeTopic* request, ::pb::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedunSubscribeMsg(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::SubscibeTopic,::pb::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_publishMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_publishMsg() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::MessageCb, ::pb::CommonResponse>(std::bind(&WithStreamedUnaryMethod_publishMsg<BaseClass>::StreamedpublishMsg, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_publishMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status publishMsg(::grpc::ServerContext* context, const ::pb::MessageCb* request, ::pb::CommonResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedpublishMsg(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::MessageCb,::pb::CommonResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_unSubscribeMsg<WithStreamedUnaryMethod_publishMsg<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_subscribeMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_subscribeMsg() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::pb::SubscibeTopic, ::pb::MessageCb>(std::bind(&WithSplitStreamingMethod_subscribeMsg<BaseClass>::StreamedsubscribeMsg, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_subscribeMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status subscribeMsg(::grpc::ServerContext* context, const ::pb::SubscibeTopic* request, ::grpc::ServerWriter< ::pb::MessageCb>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedsubscribeMsg(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::pb::SubscibeTopic,::pb::MessageCb>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_registerResponseCb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_registerResponseCb() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler< ::pb::RegisterMsg, ::pb::StreamMessage>(std::bind(&WithSplitStreamingMethod_registerResponseCb<BaseClass>::StreamedregisterResponseCb, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_registerResponseCb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status registerResponseCb(::grpc::ServerContext* context, const ::pb::RegisterMsg* request, ::grpc::ServerWriter< ::pb::StreamMessage>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedregisterResponseCb(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::pb::RegisterMsg,::pb::StreamMessage>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_subscribeMsg<WithSplitStreamingMethod_registerResponseCb<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_subscribeMsg<WithStreamedUnaryMethod_unSubscribeMsg<WithStreamedUnaryMethod_publishMsg<WithSplitStreamingMethod_registerResponseCb<Service > > > > StreamedService;
};

}  // namespace pb


#endif  // GRPC_pb_2eproto__INCLUDED
