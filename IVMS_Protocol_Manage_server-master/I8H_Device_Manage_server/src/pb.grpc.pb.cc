// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pb.proto

#include "pb.pb.h"
#include "pb.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pb {

static const char* Pb_method_names[] = {
  "/pb.Pb/subscribeMsg",
  "/pb.Pb/unSubscribeMsg",
  "/pb.Pb/publishMsg",
  "/pb.Pb/registerResponseCb",
  "/pb.Pb/registerRequestUpload",
};

std::unique_ptr< Pb::Stub> Pb::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Pb::Stub> stub(new Pb::Stub(channel));
  return stub;
}

Pb::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_subscribeMsg_(Pb_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_unSubscribeMsg_(Pb_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_publishMsg_(Pb_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_registerResponseCb_(Pb_method_names[3], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_registerRequestUpload_(Pb_method_names[4], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientReader< ::pb::MessageCb>* Pb::Stub::subscribeMsgRaw(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::pb::MessageCb>::Create(channel_.get(), rpcmethod_subscribeMsg_, context, request);
}

void Pb::Stub::experimental_async::subscribeMsg(::grpc::ClientContext* context, ::pb::SubscibeTopic* request, ::grpc::experimental::ClientReadReactor< ::pb::MessageCb>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::pb::MessageCb>::Create(stub_->channel_.get(), stub_->rpcmethod_subscribeMsg_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::pb::MessageCb>* Pb::Stub::AsyncsubscribeMsgRaw(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::pb::MessageCb>::Create(channel_.get(), cq, rpcmethod_subscribeMsg_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::pb::MessageCb>* Pb::Stub::PrepareAsyncsubscribeMsgRaw(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::pb::MessageCb>::Create(channel_.get(), cq, rpcmethod_subscribeMsg_, context, request, false, nullptr);
}

::grpc::Status Pb::Stub::unSubscribeMsg(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::pb::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_unSubscribeMsg_, context, request, response);
}

void Pb::Stub::experimental_async::unSubscribeMsg(::grpc::ClientContext* context, const ::pb::SubscibeTopic* request, ::pb::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_unSubscribeMsg_, context, request, response, std::move(f));
}

void Pb::Stub::experimental_async::unSubscribeMsg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_unSubscribeMsg_, context, request, response, std::move(f));
}

void Pb::Stub::experimental_async::unSubscribeMsg(::grpc::ClientContext* context, const ::pb::SubscibeTopic* request, ::pb::CommonResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_unSubscribeMsg_, context, request, response, reactor);
}

void Pb::Stub::experimental_async::unSubscribeMsg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::CommonResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_unSubscribeMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb::CommonResponse>* Pb::Stub::AsyncunSubscribeMsgRaw(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::CommonResponse>::Create(channel_.get(), cq, rpcmethod_unSubscribeMsg_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::CommonResponse>* Pb::Stub::PrepareAsyncunSubscribeMsgRaw(::grpc::ClientContext* context, const ::pb::SubscibeTopic& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::CommonResponse>::Create(channel_.get(), cq, rpcmethod_unSubscribeMsg_, context, request, false);
}

::grpc::Status Pb::Stub::publishMsg(::grpc::ClientContext* context, const ::pb::MessageCb& request, ::pb::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_publishMsg_, context, request, response);
}

void Pb::Stub::experimental_async::publishMsg(::grpc::ClientContext* context, const ::pb::MessageCb* request, ::pb::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_publishMsg_, context, request, response, std::move(f));
}

void Pb::Stub::experimental_async::publishMsg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_publishMsg_, context, request, response, std::move(f));
}

void Pb::Stub::experimental_async::publishMsg(::grpc::ClientContext* context, const ::pb::MessageCb* request, ::pb::CommonResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_publishMsg_, context, request, response, reactor);
}

void Pb::Stub::experimental_async::publishMsg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::CommonResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_publishMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb::CommonResponse>* Pb::Stub::AsyncpublishMsgRaw(::grpc::ClientContext* context, const ::pb::MessageCb& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::CommonResponse>::Create(channel_.get(), cq, rpcmethod_publishMsg_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::CommonResponse>* Pb::Stub::PrepareAsyncpublishMsgRaw(::grpc::ClientContext* context, const ::pb::MessageCb& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::CommonResponse>::Create(channel_.get(), cq, rpcmethod_publishMsg_, context, request, false);
}

::grpc::ClientReader< ::pb::StreamMessage>* Pb::Stub::registerResponseCbRaw(::grpc::ClientContext* context, const ::pb::RegisterMsg& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::pb::StreamMessage>::Create(channel_.get(), rpcmethod_registerResponseCb_, context, request);
}

void Pb::Stub::experimental_async::registerResponseCb(::grpc::ClientContext* context, ::pb::RegisterMsg* request, ::grpc::experimental::ClientReadReactor< ::pb::StreamMessage>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::pb::StreamMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_registerResponseCb_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::pb::StreamMessage>* Pb::Stub::AsyncregisterResponseCbRaw(::grpc::ClientContext* context, const ::pb::RegisterMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::pb::StreamMessage>::Create(channel_.get(), cq, rpcmethod_registerResponseCb_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::pb::StreamMessage>* Pb::Stub::PrepareAsyncregisterResponseCbRaw(::grpc::ClientContext* context, const ::pb::RegisterMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::pb::StreamMessage>::Create(channel_.get(), cq, rpcmethod_registerResponseCb_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::pb::StreamMessage>* Pb::Stub::registerRequestUploadRaw(::grpc::ClientContext* context, ::pb::CommonResponse* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::pb::StreamMessage>::Create(channel_.get(), rpcmethod_registerRequestUpload_, context, response);
}

void Pb::Stub::experimental_async::registerRequestUpload(::grpc::ClientContext* context, ::pb::CommonResponse* response, ::grpc::experimental::ClientWriteReactor< ::pb::StreamMessage>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::pb::StreamMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_registerRequestUpload_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::pb::StreamMessage>* Pb::Stub::AsyncregisterRequestUploadRaw(::grpc::ClientContext* context, ::pb::CommonResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::pb::StreamMessage>::Create(channel_.get(), cq, rpcmethod_registerRequestUpload_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::pb::StreamMessage>* Pb::Stub::PrepareAsyncregisterRequestUploadRaw(::grpc::ClientContext* context, ::pb::CommonResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::pb::StreamMessage>::Create(channel_.get(), cq, rpcmethod_registerRequestUpload_, context, response, false, nullptr);
}

Pb::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Pb_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Pb::Service, ::pb::SubscibeTopic, ::pb::MessageCb>(
          std::mem_fn(&Pb::Service::subscribeMsg), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Pb_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Pb::Service, ::pb::SubscibeTopic, ::pb::CommonResponse>(
          std::mem_fn(&Pb::Service::unSubscribeMsg), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Pb_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Pb::Service, ::pb::MessageCb, ::pb::CommonResponse>(
          std::mem_fn(&Pb::Service::publishMsg), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Pb_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Pb::Service, ::pb::RegisterMsg, ::pb::StreamMessage>(
          std::mem_fn(&Pb::Service::registerResponseCb), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Pb_method_names[4],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Pb::Service, ::pb::StreamMessage, ::pb::CommonResponse>(
          std::mem_fn(&Pb::Service::registerRequestUpload), this)));
}

Pb::Service::~Service() {
}

::grpc::Status Pb::Service::subscribeMsg(::grpc::ServerContext* context, const ::pb::SubscibeTopic* request, ::grpc::ServerWriter< ::pb::MessageCb>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Pb::Service::unSubscribeMsg(::grpc::ServerContext* context, const ::pb::SubscibeTopic* request, ::pb::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Pb::Service::publishMsg(::grpc::ServerContext* context, const ::pb::MessageCb* request, ::pb::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Pb::Service::registerResponseCb(::grpc::ServerContext* context, const ::pb::RegisterMsg* request, ::grpc::ServerWriter< ::pb::StreamMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Pb::Service::registerRequestUpload(::grpc::ServerContext* context, ::grpc::ServerReader< ::pb::StreamMessage>* reader, ::pb::CommonResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pb

